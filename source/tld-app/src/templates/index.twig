<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TL;D</title>
    <link rel="stylesheet" href="css/index.css">
</head>
<body>

<header>
    <h1>TL;D</h1>
    <p>Too Long; Didn't [Reach]</p>
</header>

<div class="content">
    <div class="login-section">
        <h3>Login to your TL;D Account</h3>
        <div class="login-container">
            <form class="login-form" action="/login" method="POST">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" placeholder="Enter your username" required>
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" placeholder="Enter your password" required>
                <button type="submit" class="btn">Login</button>
            </form>
        </div>
    </div>
    <h2><b>Forum</b> - Hot ThreadsðŸ”¥ðŸ§µ</h2>
    <div class="forum">
        <h3>Thread: The Technical Details Behind TL;D</h3>
        <div class="post">
            <p><strong>John Doe (Technical Staff)</strong>: TL;D was built using a modern tech stack including React for
                the frontend, Node.js for the backend, and MongoDB for data storage. We focused on scalability and
                performance.</p>
        </div>

        <div class="post">
            <p><strong>Jane Smith (Developer)</strong>: Our team integrated continuous deployment practices, using
                GitLab CI/CD pipelines for automated testing and deployment. We also used Docker to containerize our
                services.</p>
        </div>

        <div class="post">
            <p><strong>Mike Johnson (DevOps)</strong>: We used AWS for hosting the application, including EC2 instances
                for the backend and S3 for static assets. We also leverage CloudWatch for monitoring the application.
            </p>
        </div>

        <div class="post">
            <p><strong>Emily Taylor (Frontend Developer)</strong>: The frontend is built with React and
                styled-components for a component-based architecture. We use Redux for state management across the
                application.</p>
        </div>
    </div>
</div>

</body>
</html>
